para fazer o deploy é preciso ter um package.json na pasta raiz /deploy/
execute o comando abaixo para cria-lo
npm init -y

abra o package.json da pasta raiz e edite a linha de debug
De
"scripts": {
"test": "echo \"Error: no test specified\" && exit 1"
},

para
"scripts": {
"build": "npm i --prefix back-end && npm i --prefix front-end && npm run build --prefix front-end"
"start": "npm run start --prefix back-end"
},

abra o package.json da pasta back-end e edite as linhas
De
"scripts": {
"test": "echo \"Error: no test specified\" && exit 1"
},

para
"scripts": {
"start": "node ./api/server.js"
},

para testar execute os comandos
npm run build
npm run start

no navegador Chrome provavelmente dara erro por causa de config do vite
entre em vite.config.js e inclua as linhas
build:{
target:"esnext",
},
re-execute o npm run build

isso ira criar a pasta dist no front end

para funcionar os end points "/", no arquivo server.js, tem que ser substituidos por "/api/"
faça um substituir tudo de "/" para "/api/"
no arquivo api.js do front-end mude o
"http://localhost:3001" para "http://localhost:3001/api"
ainda no front-end crie o arquivo de environment
.env

toda essa parte deu erro no front-end e no fim foi retirada
        instale a biblioteca de environment dotenv
        npm i dotenv
        inclua no arquivo api.js as linhas
        import "dotenv/config";

            const { NODE_ENV } = process.env;

        modifique a linha de URL para
        const URL = NODE_ENV === 'delevopment' ? URL = "http://localhost:3001/api" : "/api"
    o api.js ficou assim:
        //import "dotenv/config";
        import axios from "axios";

        //const { NODE_ENV } = process.env;
        //const URL = NODE_ENV === "development" ? "http://localhost:3001/api" : "/api";
        const URL = "https://deploy-jornada-full-stack.onrender.com/api";
        
        const responseFromArtist = await axios.get(`${URL}/artist`);
        const responseFromSongs = await axios.get(`${URL}/songs`);

        export const artistArray = responseFromArtist.data;
        export const songsArray = responseFromSongs.data;

todo que era vinculado ao dotenv foi comentado ou excluido

No server.js modifique as linhas para detectar se está em development ou não

uma forma seria antes do listen incluir as linhas
app.use(express.static("../../front-end/dist"));

app.get("\*", async (request, response) => {
response.sendFile("../../front-end/dist/index.html");
});

mas o ideal é usar o pacote path para gerenciar isso
no back-end intale o path
npm i path

no server.js
apos os imports inclua
const \_\_dirname = path.resolve();

inclua as linhas abaixo antes do listen
app.use(express.static(path.join(--dirname, "../front-end/dist")));

app.get("\*", async (request, response) => {
response.sendFile(path.join(--dirname, "../front-end/dist/index.html"));
});

após estes ajustes fazer o update do git hub
git add .
git commit -m "ajustes para deploy"
git push

Iniciar o deploy utilizando o Render
